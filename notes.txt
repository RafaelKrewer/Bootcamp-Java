Atalhos:
Ctrl+Shift+L = Seleciona todas as vezes da letra em azul.

Ctrl+Tab = Alterna as abas abertas.

Rodar Java: F5

public class MinhaClasse {
  public static void main(String[] args) {

  }
}

Todo arquivo .java deve começar com a letra MAIÚSCULA. Se a palavra for composta, a segunda palavra também tem que ser maiúscula.
ex: Calculadora.java; CalculadoraCientifica.java

A classe precisa ter o mesmo nome do arquivo .java
ex: arquivo: Classe.java
    public class Classe {} etc...

Pra criar uma variável que muda:
String BR = "Brasil";

Pra criar uma variável que não muda:
final String BR = "Brasil"; //Precisa ter o fnal e ser em MAIUSCULA

Estrutura da variável:
Tipo NomeBemDefinido = Atribuição;

Estrutura dos métodos:
TipoRetorno NomeObjetivo Parametro(s)
ex: int somar (int numeroUm, int numeroDois)

Tipos Primitivos em Java:
int: número inteiro
byte: um inteiro de 8 bits
short: número curto
long: número longo 
float: valor com vírgula 
double: valor com vírgula
boolean: true ou false 
char: caractere único
void: ausência de valor

O operador ++ aumenta 1 no número, e o -- diminui 1

Operador Ternário (if () {} else{}):
<Expressão Condicional> ? <caso condição seja true> : <caso condição seja false>
Ex: int nota = 8;
String resultado = nota >= 7 ? "Aprovado" : "Reprovado";



O operador Igual (=) sempre vai ser == quando comparando dois valores.

Métodos:
public class TV {
  boolean ligada = false;  
  int canal = 1;
  int volume = 15;

  public void ligar() {
    ligada = true;
  }
}

Variáveis locais: Só podem ser acessadas dentro do método em que foram declaradas.
Variáveis globais: Podem ser acessadas de qualquer método na classe se tiverem o modificador de acesso correto.
Escopo de classe: Variáveis declaradas em uma classe estão disponíveis para todos os métodos dessa classe. 
Escopo de fluxo: Definido pelo fluxo de execução do programa, diferente do escopo "tradicional". 


Palavras reservadas:

public: acesso de qualquer classe.
private: acesso apenas dentro da classe.
protected: acesso por classes no mesmo pacote ou subclasses.

abstract: classe que não pode ser instanciada ou método que precisa ser implementado por uma subclasse não abstrata
extends: indica a superclasse que a subclasse está estendendo.
final: impossibilita que uma classe seja estendida, que um método seja sobescrito ou que uma variável seja reinicializada
implements: indica as interfaces que uma classe irá implementar
native: indica que um método está escrito em uma linguagem dependente de plataforma, como o C. Quase nunca usado
static: faz um método ou variável pertencer à classe ao invés de às instâncias
strictfp: usado em frente a um método ou classe para indicar que os números do ponto flutuante seguirão as regras de ponto flutuante em todas as expressões
synchronized: indica que um método só pode ser acessado por uma thread de cada vez
transient: impede a serialização de campos
volatile: indica que uma variável pode ser alterada durante o uso de threads. Quase nunca usada
arquivo: package, import, static

  Palavras opostas ou que podem ser substituidas:
package e import
extends e implements
final e abstract
throws e throw

Scanner: Serve pra o usuário digitar alguma coisa.
Ex:
Scanner scanner = new Scanner(System.in).useLocale(Locale.US);